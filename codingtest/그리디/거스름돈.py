# 문제
# 당신은 음식점의 계산을 도와주는 점원이다. 카운터에는 거스름돈으로 사용할
# 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정한다.
# 손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러줘야 할 동전의 최소 개수를 구하라.
# 단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다.

# 아이디어
# '가장 큰 화폐 단위부터' 돈을 거슬러 주는 것

money = int(input())

coin_count = 0

coins = [500, 100, 50, 10]

for coin in coins:
    temp = money // coin # money를 coin으로 나눈 몫
    coin_count += temp
    money %= coin # money의 값을 coin으로 나눈 나머지로 바꿔준다.
    print("{}원 {}개".format(coin, temp))

print("거슬러줘야 할 동전의 최소 개수 {}".format(coin_count))

# 시간 복잡도

# 코드를 보면 화폐의 종류만큼 반복을 수행해야 함.
# 화폐의 종류가 K개라고 할 때, 시간 복잡도는 O(K)이다.
# 이 알고리즘에서 시간 복잡도는 거슬러 주어야 하는 금액의 크기와는 무관하므로
# 동전의 총 종류에만 영향을 받는다.

# 그리디 알고리즘의 정당성

# 대부분의 문제에서 그리디 알고리즘을 적용했을 때, 최적의 해를 찾을 수 없는 가능성이 다분하지만
# 거스름돈 문제처럼 '가장 큰 화폐 단위부터' 돈을 거슬러 줘야되는 아이디어로
# 탐욕적으로 문제에 접근했을 때 정확한 답을 찾을 수 있다는 보장이 있다면 효과적이다.
# 하지만 그리디 알고리즘으로 문제의 해법을 찾았을 때, 그 해법이 정당한지 검토해야 한다.
# 위 문제의 해법이 나올 수 있었던 이유는 가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로
# 작은 단위의 동전들을 종합해서 다른 해가 나올 수 없기 때문이다.

# 이처럼 대부분의 그리디 알고리즘 문제에서는 문제 풀이를 위한 최소한의 아이디어를 떠올리고 이것이 정당한지
# 검토할 수 있어야 답을 도출할 수 있다.
